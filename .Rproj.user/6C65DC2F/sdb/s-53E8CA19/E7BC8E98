{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Homework 2 solutions\"\nauthor: \"Jeff Goldsmith\"\ndate: '`r format(Sys.time(), \"%Y-%m-%d\")`'\noutput:\n  html_document: \n    toc: true\n    toc_float: true\nhitheme: tomorrow\nhighlighter: highlight.js\n\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(collapse = TRUE, message = FALSE)\n```\n\n### Due date\n\nDue: October 4 at 5:00pm. \n\n### Points\n\n* Problem 0: 10 points\n* Problem 1: 30 points\n* Problem 2: 30 points\n* Problem 3: 30 points\n\n### Problem 0\n\nThis \"problem\" focuses on structure of your assignment, including the use of R Markdown to write reproducible reports, the use of R Projects to organize your work, the use of relative paths to load data, and the naming structure for your files. \n\nTo that end: \n\n* create a directory named `p8105_hw2_YOURUNI` (e.g. `p8105_h21_ajg2202` for Jeff)\n* put an R project in the directory\n* create a single .Rmd file named `p8105_hw2_YOURUNI.Rmd`\n\nSome of the datasets used in this homework are large, so you should not include raw data files in your directory. Instead, create a separate directory called `data` and use relative paths starting with `../data/` to load data. We'll have a similar directory and should be able to knit your R Markdown file. \n\n```{r load_libraries}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(janitor)\nlibrary(DT)\ninstall.packages('DT')\n```\n\n### Problem 1\n\nFirst we clean the Mr. Trash Wheel dataset and round the number of sports balls to the nearest integer.\n\n```{r clean_trash}\nmr_trash_wheel = read_excel(\"../data/HealthyHarborWaterWheelTotals2017-9-26.xlsx\",\n           sheet = \"Mr. Trash Wheel\", range = cell_cols(\"A:N\")) %>%\n  clean_names() %>%\n  filter(!is.na(dumpster)) %>%\n  mutate(sports_balls = round(sports_balls),\n         sports_balls = as.integer(sports_balls))\n\nstr(mr_trash_wheel)\n```\n\nNext we read clean precipitation data for 2016 and 2017, omit rows without precipitation data, add a variable year, combine datasets, and convert month to a character variable.\n\n```{r clean_precipitation}\nprecip_2016 = \n  read_excel(\"../data/HealthyHarborWaterWheelTotals2017-9-26.xlsx\",\n             sheet = \"2016 Precipitation\", skip = 1) %>%\n  clean_names() %>%\n  filter(!is.na(month)) %>%\n  mutate(year = 2016)\n\nprecip_2017 = \n  read_excel(\"../data/HealthyHarborWaterWheelTotals2017-9-26.xlsx\",\n             sheet = \"2017 Precipitation\", skip = 1) %>%\n  clean_names() %>%\n  filter(!is.na(total)) %>%\n  mutate(year = 2017)\n\nprecip = bind_rows(precip_2016, precip_2017) %>%\n  mutate(month = month.name[month])\n\nstr(precip)\nlubridate::floor_date\n```\n\nSo what's going on in these datasets? First we examine Mr. Trash Wheel. This dataset has `r nrow(mr_trash_wheel)` observations and `r ncol(mr_trash_wheel)` variables. Other than `month` and `date`, all variables are class `integer` or `numeric`. Number of sports balls is the only integer class variable. In 2016, the **median number of sports balls found in a dumpster was `r mr_trash_wheel %>% filter(year == 2016) %>% pull(sports_balls) %>% median()`**. \n\nThe precipitation data has `r nrow(precip)` observations and `r ncol(precip)` variables, the only variables in the dataset being `month`, `total` for total precipitation, and `year`. The **total precipitation in 2017 was `r filter(precip, year == 2017) %>% pull(total) %>% sum()` inches**.\n\n\n### Problem 2\n\nNext we clean the 538 `pols` data, which provides information on the number of national politicians who are democratic or republican at any given time. Note that we code values for which `prez_gop` is `2` we code the new variable `president` as `gop` -- these are months in which Ford became President following Nixon's resignation.\n\n```{r clean_538_pols}\npols = read_csv(\"../data/fivethirtyeight_datasets/pols-month.csv\") %>%\n  separate(mon, into = c(\"year\", \"month\", \"day\"), convert = TRUE) %>%\n  mutate(month = month.name[month], \n         president = recode(prez_gop, `0` = \"dem\", `1` = \"gop\", `2` = \"gop\")) %>%\n  select(-day, -starts_with(\"prez\"))\n```\n\nWe also clean the 538 `snp` data, which contains information related to Standard & Poor???s stock market index.\n\n```{r clean_538_snp}\nsnp = read_csv(\"../data/fivethirtyeight_datasets/snp.csv\") %>%\n  separate(date, into = c(\"month\", \"day\", \"year\"), convert = TRUE) %>%\n  arrange(year, month) %>%\n  mutate(month = month.name[month]) %>%\n  select(year, month, close) \n```\n\nFinally, we tidy the `unemployment` data so that it can be merged with the `pols` and `snp` datasets.\n\n```{r clean_538_unemp}\nunemployment = read_csv(\"../data/fivethirtyeight_datasets/unemployment.csv\") %>%\n  rename(year = Year) %>%\n  gather(key = month, value = unemployment, Jan:Dec) %>%\n  mutate(month = recode(month, \n                        Jan = \"January\", \n                        Feb = \"February\",\n                        Mar = \"March\",\n                        Apr = \"April\",\n                        May = \"May\",\n                        Jun = \"June\",\n                        Jul = \"July\",\n                        Aug = \"August\",\n                        Sep = \"September\",\n                        Oct = \"October\",\n                        Nov = \"November\",\n                        Dec = \"December\"))\n```\n\nNow we merge the three datasets!\n\n```{r merge_538}\ndata_538 = left_join(pols, snp) %>%\n  left_join(., unemployment)\n\nstr(data_538)\n```\n\nNotice that there are some `NA` values in the `close` and `unemployment` variables, which indicate that the value of these variables is missing at those locations.\n\nLet's talk about the 538 datasets. The `pols` data has `r nrow(pols)` observations and `r ncol(pols)` variables and tells us about the party affiliation distribution (democrat or republican) for governors and senators for a given year from years `r range(pols$year)[1]` to `r range(pols$year)[2]`. It also tells us whether the sitting president was a democrat or republican. The `snp` data has `r nrow(snp)` observations and `r ncol(snp)` variables, ranging from years `r range(snp$year)[1]` to `r range(snp$year)[2]`. The `unemployment` data has `r nrow(unemployment)` observations and `r ncol(unemployment)` variables ranging from years `r range(unemployment$year)[1]` to `r range(unemployment$year)[2]`. In Januarys in or after 1975 in which a democrat was president, the **average unemployment rate was `r filter(data_538, month == \"January\", year >= 1975, president == \"dem\") %>% pull(unemployment) %>% mean() %>% round(., 2)`**.  The average unemployment rate over the same time period in which a republican was president was `r filter(data_538, month == \"January\", year >= 1975, president == \"gop\") %>% pull(unemployment) %>% mean() %>% round(., 2)`.\n\n### Problem 3\n\nFirst we read and unzip the instacart data.\n\n```{r read_instacart}\ninstacart = read_csv(\"../data/instacart_train_data.csv.zip\")\n```\n\nNext we answer some questions about the instacart data.\n\n* How many entries are in the dataset?\n    * How many unique orders?\n\nThere are `r dim(instacart)[1]` entries in the dataset and `r instacart %>% pull(order_id) %>% unique() %>% length()` unique orders.\n\n* Make a histogram of order hour for items from the produce department.\n\nHistogram shown below:\n\n```{r hist_order_hour}\ninstacart %>% \n  filter(department == \"produce\") %>% \n  pull(order_hour_of_day) %>% \n  hist(main = \"Order hours for items from produce department\", col = \"forestgreen\", border = \"orange\")\n```\n\n* How are aisles related to departments? \n\n```{r insta_aisles}\ninstacart %>% \n  select(department, aisle) %>%\n  distinct() %>%\n  arrange(department, aisle) %>% DT::datatable() # could also have loaded library(DT) in first code chunk\n```\n\n--\n\nWe can look through the data table above to see how aisles are related to department. For example, the breakfast department contains cereal, granola, and pancake mixes. Aisles only appear in a single department, and every aisle is in a department.\n\n* From what department are the most items ordered? \n    * From what department are the least items ordered?\n    \n```{r min_and_max}\nmax = max(table(instacart$department))\nmin = min(table(instacart$department))\n\nmax_department = table(instacart$department)[which(table(instacart$department) == max)]\nmin_department = table(instacart$department)[which(table(instacart$department) == min)]\n```\n\nThe most items, `r  max_department %>% as.integer`, are delivered from the `r names(max_department)` department and fewest items are delivered from the `r names(min_department)` department, at `r  min_department %>% as.numeric` items.\n\n  \n* What is the median number of days since the prior order? \n\n```{r median_days_prior}\nmedian_days = instacart %>%\n  select(order_id, days_since_prior_order) %>%\n  distinct() %>%\n  pull(days_since_prior_order) %>%\n  median\n```\n\nThe median number of days since the prior order is `r median_days`.\n\n* What is the median hour of the day at which Pink Lady Apples are ordered? \n    * What about Coffee Ice Cream?\n    \n```{r median_foods}\nmedian_apples = instacart %>%\n  filter(product_name == \"Pink Lady Apples\") %>%\n  pull(order_hour_of_day) %>% \n  median()\n\nmedian_coffee = instacart %>%\n  filter(product_name == \"Coffee Ice Cream\") %>%\n  pull(order_hour_of_day) %>% \n  median()\n```\n\nPink lady apples are ordered at a median hour of `r median_apples`. The median hour of the day to order coffee ice cream, arguably the best type of ice cream, is `r median_coffee`. People tend to order pink lady apples earlier in the day than they order coffee ice cream.\n\n",
    "created" : 1509078478154.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "771735579",
    "id" : "E7BC8E98",
    "lastKnownWriteTime" : 1507744931,
    "last_content_update" : 1509078624555,
    "path" : "~/Desktop/2017_fall_courses/data_science/results/p8105_hw2_ajg2202/p8105_hw2_ajg2202.Rmd",
    "project_path" : null,
    "properties" : {
        "last_setup_crc32" : "F8F43CCCe780952c"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}